{"version":3,"sources":["global-context.js","utils.js","player.js","enemy.js","config/db.js","game.js","api/index.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","key","upHandler","useEffect","window","addEventListener","removeEventListener","handleUserInput","direction","current","updatePosition","top","left","DIRECTIONS","getRandomDirection","Math","floor","random","Player","playerPosition","collisionHappened","style","width","height","background","position","transition","zIndex","borderRadius","Enemy","pos","overflow","display","client","faunadb","Client","secret","process","q","query","Game","PLAYER_POS","userInput","useRef","setPlayerPosition","enemyPositions","setEnemyPositions","count","setCount","speed","setSpeed","score","setScore","setCollisionHappned","sessionHighScore","setSessionHighScore","best","setBest","arrowLeft","arrowRight","arrowUp","arrowDown","fetchScores","Paginate","Match","Ref","then","response","getAllDataQuery","data","map","ref","Get","catch","error","console","message","res","arrOfScores","name","bestPerson","forEach","s","init","setTimeout","getNewEnemy","offset","updatedEnemies","e","enemyOne","enemyTwo","concat","newEnemy","alert","clearTimeout","scoreTimer","playerPos","setCollisionHappened","enemy","log","paddingLeft","border","paddingTop","fontWeight","type","className","marginBottom","fontSize","onClick","Create","Collection","ret","createRecord","value","disabled","get","idx","margin","color","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.904e6e2a.chunk.js","sourcesContent":["import React from 'react'\n\nconst GlobalContext = React.createContext()\n\nexport default GlobalContext","import React, { useEffect, useState } from 'react';\n\nexport function useKeyPress(targetKey) {\n\t// State for keeping track of whether key is pressed\n\tconst [ keyPressed, setKeyPressed ] = useState(false);\n\n\t// If pressed key is our target key then set to true\n\tfunction downHandler({ key }) {\n\t\tif (key === targetKey) {\n\t\t\tsetKeyPressed(true);\n\t\t}\n\t}\n\n\t// If released key is our target key then set to false\n\tconst upHandler = ({ key }) => {\n\t\tif (key === targetKey) {\n\t\t\tsetKeyPressed(false);\n\t\t}\n\t};\n\n\t// Add event listeners\n\tuseEffect(() => {\n\t\twindow.addEventListener('keydown', downHandler);\n\t\twindow.addEventListener('keyup', upHandler);\n\t\t// Remove event listeners on cleanup\n\t\treturn () => {\n\t\t\twindow.removeEventListener('keydown', downHandler);\n\t\t\twindow.removeEventListener('keyup', upHandler);\n\t\t};\n\t}, []); // Empty array ensures that effect is only run on mount and unmount\n\n\treturn keyPressed;\n}\n\nexport const handleUserInput = (direction, current, updatePosition) => {\n\tif (direction === 'left') updatePosition({ top: current.top, left: current.left - 40 });\n\tif (direction === 'right') updatePosition({ top: current.top, left: current.left + 40 });\n\tif (direction === 'up') updatePosition({ top: current.top - 40, left: current.left });\n\tif (direction === 'down') updatePosition({ top: current.top + 40, left: current.left });\n};\n\nexport const checkCollision = (playerPos, enemyPos, setCollisionHappened) => {\n\tenemyPos.forEach((enemy) => {\n\t\tif (\n\t\t\tplayerPos.left < enemy.left + 40 &&\n\t\t\tplayerPos.top < enemy.top + 40 &&\n\t\t\tplayerPos.left + 40 > enemy.left &&\n\t\t\tplayerPos.top + 40 > enemy.top\n\t\t) {\n\t\t\tconsole.log('collision!')\n\t\t\tsetCollisionHappened(true)\n\t\t}\n\t});\n};\n\nconst DIRECTIONS = [ 'up', 'right', 'down', 'left' ];\nexport const getRandomDirection = () => DIRECTIONS[Math.floor(Math.random() * Math.floor(3))]\n","import React from 'react';\n\nexport const Player = ({ playerPosition, collisionHappened }) => {\n\treturn <div\n\t\tstyle={{\n\t\t\twidth: 40,\n\t\t\theight: 40,\n\t\t\tbackground: collisionHappened ? '#e8eb34' :'grey',\n\t\t\tposition: 'absolute',\n\t\t\ttop: playerPosition.top,\n\t\t\tleft: playerPosition.left,\n\t\t\ttransition: 'all 0.1s ease',\n\t\t\tzIndex: 3,\n\t\t\tborderRadius:2\n\t\t}}\n\t/>;\n};\n","import React from 'react';\n\nexport const Enemy = ({pos}) => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\twidth: 40,\n\t\t\t\theight: 40,\n\t\t\t\tbackground: '#eb4034',\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttop: pos && pos.top,\n                left: pos && pos.left,\n                zIndex: 1,\n                transition: 'all 0.1s linear',\n                overflow:'hidden',\n\t\t\t\tdisplay: pos && pos.direction === 'outOfView' ? 'none' : '',\n\t\t\t\tborderRadius:2\n\t\t\t}}\n\t\t/>\n\t);\n};\n","import faunadb from 'faunadb';\nconst client = new faunadb.Client({\n\tsecret: process.env.REACT_APP_DB_KEY\n});\nconst q = faunadb.query;\nexport { client, q };\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useKeyPress, handleUserInput, checkCollision, getRandomDirection } from './utils';\nimport { Player } from './player';\nimport { Enemy } from './enemy';\nimport { CSSTransition } from 'react-transition-group';\nimport { createRecord, getAll } from './api';\nimport { get } from 'lodash';\n\nexport const Game = () => {\n\tlet PLAYER_POS = {\n\t\ttop: 200,\n\t\tleft: 200\n\t};\n\n\tconst userInput = useRef(null);\n\tconst [ playerPosition, setPlayerPosition ] = useState(PLAYER_POS);\n\tconst [ enemyPositions, setEnemyPositions ] = useState([]);\n\tconst [ count, setCount ] = useState(0);\n\tconst [ speed, setSpeed ] = useState(10);\n\tconst [ score, setScore ] = useState(0);\n\tconst [ collisionHappened, setCollisionHappned ] = useState(false);\n\tconst [ sessionHighScore, setSessionHighScore ] = useState(0);\n\tconst [ best, setBest ] = useState(null);\n\n\tconst arrowLeft = useKeyPress('ArrowLeft');\n\tconst arrowRight = useKeyPress('ArrowRight');\n\tconst arrowUp = useKeyPress('ArrowUp');\n\tconst arrowDown = useKeyPress('ArrowDown');\n\n\tconst fetchScores = () => {\n\t\tgetAll().then((res) => {\n\t\t\tconst arrOfScores = res.map((data) => {\n\t\t\t\treturn { name: data.data.name, score: data.data.score };\n\t\t\t});\n\t\t\tlet bestPerson = { name: null, score: 0 };\n\t\t\tarrOfScores.forEach((s) => {\n\t\t\t\tif (s.score > bestPerson.score) {\n\t\t\t\t\tbestPerson['name'] = s.name;\n\t\t\t\t\tbestPerson['score'] = s.score;\n\t\t\t\t}\n\t\t\t});\n\t\t\tsetBest(bestPerson);\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tfetchScores();\n\t}, []);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tconst init = setTimeout(() => {\n\t\t\t\tconst getNewEnemy = (direction, offset = 0) => {\n\t\t\t\t\tif (direction === 'up')\n\t\t\t\t\t\treturn { top: 440 + offset, left: playerPosition.left, direction: direction };\n\t\t\t\t\tif (direction === 'right')\n\t\t\t\t\t\treturn { top: playerPosition.top, left: -40 - offset, direction: direction };\n\t\t\t\t\tif (direction === 'down')\n\t\t\t\t\t\treturn { top: -40 - offset, left: playerPosition.left, direction: direction };\n\t\t\t\t\tif (direction === 'left')\n\t\t\t\t\t\treturn { top: playerPosition.top, left: 440 + offset, direction: direction };\n\t\t\t\t};\n\t\t\t\tlet updatedEnemies =\n\t\t\t\t\tenemyPositions &&\n\t\t\t\t\tenemyPositions.map((e) => {\n\t\t\t\t\t\tif (e.direction === 'outOfView') return {};\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttop:\n\t\t\t\t\t\t\t\t\te.direction === 'down'\n\t\t\t\t\t\t\t\t\t\t? e.top + speed\n\t\t\t\t\t\t\t\t\t\t: e.direction === 'up' ? e.top - speed : e.top,\n\t\t\t\t\t\t\t\tleft:\n\t\t\t\t\t\t\t\t\te.direction === 'left'\n\t\t\t\t\t\t\t\t\t\t? e.left - speed\n\t\t\t\t\t\t\t\t\t\t: e.direction === 'right' ? e.left + speed : e.left,\n\t\t\t\t\t\t\t\tdirection:\n\t\t\t\t\t\t\t\t\te.top > 560 || e.top < -160 || e.left < -160 || e.left > 560\n\t\t\t\t\t\t\t\t\t\t? 'outOfView'\n\t\t\t\t\t\t\t\t\t\t: e.direction\n\t\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\tsetCount(count + 1);\n\n\t\t\t\tif (count <= 100 && speed !== 15) setSpeed(15);\n\t\t\t\tif (count === 150) setSpeed(20);\n\t\t\t\tif (count === 200) setSpeed(25);\n\t\t\t\tif (count === 250) setSpeed(30);\n\t\t\t\tif (count === 350) setSpeed(35);\n\t\t\t\tif (count === 400) setSpeed(40);\n\n\t\t\t\tif (count % 15 === 0 && count > 20) {\n\t\t\t\t\tif (count > 100 && count % 30 === 0) {\n\t\t\t\t\t\tlet enemyOne = getNewEnemy(getRandomDirection());\n\t\t\t\t\t\tlet enemyTwo = getNewEnemy(getRandomDirection(), 119);\n\t\t\t\t\t\tsetEnemyPositions(updatedEnemies.concat(enemyOne).concat(enemyTwo));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst randomDirection = getRandomDirection();\n\t\t\t\t\t\tlet newEnemy = getNewEnemy(randomDirection);\n\t\t\t\t\t\tsetEnemyPositions(updatedEnemies.concat(newEnemy));\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\t// DEFAULT\n\t\t\t\t\tsetEnemyPositions(updatedEnemies);\n\t\t\t}, 80);\n\t\t\tif (count === 10000) {\n\t\t\t\talert('YOU BEAT THE GAME');\n\t\t\t\tclearTimeout(init);\n\t\t\t}\n\n\t\t\tif (collisionHappened) {\n\t\t\t\tclearTimeout(init);\n\t\t\t\t// RESET GAME\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetCount(0);\n\t\t\t\t\tsetScore(null);\n\t\t\t\t\tsetPlayerPosition(PLAYER_POS);\n\t\t\t\t\tsetEnemyPositions([]);\n\t\t\t\t\tsetCollisionHappned(false);\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t},\n\t\t[ enemyPositions ]\n\t);\n\n\tuseEffect(\n\t\t() => {\n\t\t\t!score && setScore(0);\n\t\t\tconst scoreTimer = setTimeout(() => {\n\t\t\t\tsetScore(score + 1);\n\t\t\t}, 100);\n\t\t\tif (collisionHappened) {\n\t\t\t\tclearTimeout(scoreTimer);\n\t\t\t\tif (sessionHighScore === 0 || score > sessionHighScore) setSessionHighScore(score);\n\t\t\t}\n\t\t},\n\t\t[ score ]\n\t);\n\n\tuseEffect(\n\t\t() => {\n\t\t\t!count && setCount(0);\n\t\t},\n\t\t[ count ]\n\t);\n\n\t// TODO - MOVE TO UTILS\n\t// LISTEN FOR USER KEY EVENTS\n\tuseEffect(\n\t\t() => {\n\t\t\tarrowLeft && handleUserInput('left', playerPosition, setPlayerPosition);\n\t\t\tarrowRight && handleUserInput('right', playerPosition, setPlayerPosition);\n\t\t\tarrowUp && handleUserInput('up', playerPosition, setPlayerPosition);\n\t\t\tarrowDown && handleUserInput('down', playerPosition, setPlayerPosition);\n\t\t},\n\t\t[ arrowLeft, arrowUp, arrowRight, arrowDown ]\n\t);\n\n\tuseEffect(\n\t\t() => {\n\t\t\t// check for collision\n\t\t\tcheckCollision(playerPosition, enemyPositions, setCollisionHappned);\n\t\t},\n\t\t[ playerPosition, enemyPositions ]\n\t);\n\n\tconst handleClick = () => {\n\t\tconst val = userInput.current.value;\n\t\tcreateRecord(val, sessionHighScore).then((res) => fetchScores());\n\t};\n\n\tconst isDisabled = () => sessionHighScore < get(best, 'score');\n\n\treturn (\n\t\t<div>\n\t\t\t<Player playerPosition={playerPosition} collisionHappened={collisionHappened} />\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tbackground: 'white',\n\t\t\t\t\tzIndex: 2,\n\t\t\t\t\theight: 400,\n\t\t\t\t\twidth: 50,\n\t\t\t\t\tposition:'absolute'\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tstyle={{ background: 'lightgrey', left:50, position:'absolute' ,height: 400, width: 400, paddingLeft: 0, border: 'black solid thin' }}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tbackground: 'white',\n\t\t\t\t\tzIndex: 2,\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 450,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\theight: 400,\n\t\t\t\t\twidth: 300,\n\t\t\t\t\tpaddingLeft: 30,\n\t\t\t\t\tpaddingTop: 20,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tBest global score: <div style={{ fontWeight: 'bold' }}>{best && `${best.name} : ${best.score}`}</div>\n\t\t\t\t<br/>\n\t\t\t\t<div >\n\t\t\t\t\t<input type=\"input\" className='form-control' ref={userInput} style={{ marginBottom: 20, fontSize: 20,  }} />\n\t\t\t\t\t<button type=\"button\" className='btn btn-primary' onClick={handleClick} disabled={isDisabled()}>\n\t\t\t\t\t\t<div style={{fontSize:20}}>Save score</div>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{enemyPositions.map((e, idx) => {\n\t\t\t\treturn <Enemy pos={e} key={idx} />;\n\t\t\t})}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\twidth: 400,\n\t\t\t\t\tbackground: 'white',\n\t\t\t\t\tzIndex: 2,\n\t\t\t\t\tmargin: 0,\n\t\t\t\t\tfontSize: 30,\n\t\t\t\t\ttop: 400,\n\t\t\t\t\tleft: 50\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div style={{ transition: 'all 0.1s linear', height: 30, color: 'grey', fontSize: 20 }}>{score}</div>\n\t\t\t\t<div style={{ transition: 'all 0.1s linear', height: 200 }}><p style={{fontSize:20}}>Session Best: {sessionHighScore}</p></div>\n\t\t\t\t{/* <div style={{ transition: 'all 0.1s linear', height: 150 }}>\n\t\t\t\t\t<input type=\"input\" ref={userInput} style={{ marginBottom: 20, fontSize: 20 }} />\n\t\t\t\t\t<button type=\"button\" onClick={handleClick} disabled={isDisabled()}>\n\t\t\t\t\t\t<div style={{fontSize:20}}>Save score</div>\n\t\t\t\t\t</button>\n\t\t\t\t</div> */}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import { client, q } from '../config/db';\n\nexport const getAll = () =>\n\tclient\n\t\t.query(q.Paginate(q.Match(q.Ref('indexes/getAllHighscores'))))\n\t\t.then((response) => {\n\t\t\tconst resData = response.data;\n\t\t\tconst getAllDataQuery = resData.map((ref) => {\n\t\t\t\treturn q.Get(ref);\n\t\t\t});\n\t\t\treturn client.query(getAllDataQuery).then((data) => data);\n\t\t})\n\t\t.catch((error) => console.error('Error: ', error.message));\n\nexport const createRecord = (name, score) =>\n\tclient\n\t\t.query(\n\t\t\tq.Create(q.Collection('Highscore'), {\n\t\t\t\tdata: {\n                    name,\n                    score,\n\t\t\t\t}\n\t\t\t})\n\t\t)\n\t\t.then((ret) => ret)\n\t\t.catch((error) => console.error('Error: ', error.message));\n","import React from 'react';\nimport { GlobalContextProvider } from './global-context';\nimport { Game } from './game';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\" >\n\t\t\t<Game />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}